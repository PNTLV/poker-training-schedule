'use client';

import React, { useState, useEffect } from 'react';
import { Training } from '../types';
import TrainingForm from '../components/TrainingForm';
import Calendar from '../components/Calendar';
import { supabase } from '../lib/supabaseClient';
import './globals.css';

export default function HomePage() {
  const [trainings, setTrainings] = useState<Training[]>([]);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase
  const loadTrainings = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('trainings')
        .select('*')
        .order('datetime', { ascending: true });
      
      if (error) throw error;
      
      const formattedTrainings = data.map(training => ({
        ...training,
        datetime: new Date(training.datetime)
      }));
      
      setTrainings(formattedTrainings);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      const errorMessage = error?.message || error?.toString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase: ${errorMessage}. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.`);
      
      // –§–æ–ª–ª–±—ç–∫ –∫ localStorage
      const localTrainings = localStorage.getItem('trainings');
      if (localTrainings) {
        const parsed = JSON.parse(localTrainings).map((training: any) => ({
          ...training,
          datetime: new Date(training.datetime)
        }));
        setTrainings(parsed);
      }
    } finally {
      setLoading(false);
    }
  };

  // üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const addTraining = async (trainingData: Omit<Training, 'id'>) => {
    try {
      setLoading(true);
      setError(null);
      
      const newTraining = {
        date: trainingData.date,
        time: trainingData.time,
        trainer: trainingData.trainer,
        level: trainingData.level,
        datetime: trainingData.datetime.toISOString()
      };
      
      const { data, error } = await supabase
        .from('trainings')
        .insert([newTraining])
        .select();
      
      if (error) throw error;
      
      showSuccess('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ–±–ª–∞–∫–µ!');
      await loadTrainings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
      const errorMessage = error?.message || error?.toString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase: ${errorMessage}. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.`);
      
      // –§–æ–ª–ª–±—ç–∫ –∫ localStorage
      const localTraining: Training = {
        ...trainingData,
        id: Date.now().toString() + Math.random().toString(36).substr(2, 9)
      };
      
      const updatedTrainings = [...trainings, localTraining];
      setTrainings(updatedTrainings);
      
      localStorage.setItem('trainings', JSON.stringify(
        updatedTrainings.map(t => ({
          ...t,
          datetime: t.datetime.toISOString()
        }))
      ));
    } finally {
      setLoading(false);
    }
  };

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const deleteTraining = async (id: string) => {
    try {
      setLoading(true);
      setError(null);
      
      const { error } = await supabase
        .from('trainings')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
      
      showSuccess('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!');
      await loadTrainings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      const errorMessage = error?.message || error?.toString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Supabase: ${errorMessage}. –†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.`);
      
      // –§–æ–ª–ª–±—ç–∫ –∫ localStorage
      const updatedTrainings = trainings.filter(training => training.id !== id);
      setTrainings(updatedTrainings);
      
      localStorage.setItem('trainings', JSON.stringify(
        updatedTrainings.map(t => ({
          ...t,
          datetime: t.datetime.toISOString()
        }))
      ));
    } finally {
      setLoading(false);
    }
  };

  const changeMonth = (direction: 'prev' | 'next') => {
    setCurrentMonth(prev => {
      const newDate = new Date(prev);
      if (direction === 'prev') {
        newDate.setMonth(prev.getMonth() - 1);
      } else {
        newDate.setMonth(prev.getMonth() + 1);
      }
      return newDate;
    });
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const showSuccess = (message: string) => {
    setSuccess(message);
    setTimeout(() => setSuccess(null), 3000);
  };

  const showError = (message: string) => {
    setError(message);
    setTimeout(() => setError(null), 5000);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadTrainings();
  }, []);

  return (
    <div className="app">
      <header className="app-header">
        <h1>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã</h1>
        {loading && <div className="loading-indicator">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</div>}
      </header>

      <div className="app-content">
        <div className="form-section">
          {error && <div className="error-message">‚ùå {error}</div>}
          {success && <div className="success-message">‚úÖ {success}</div>}
          
          <TrainingForm onAddTraining={addTraining} disabled={loading} />
        </div>

        <div className="calendar-section">
          <div className="calendar-controls">
            <button onClick={() => changeMonth('prev')} className="month-btn" disabled={loading}>
              ‚Äπ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            </button>
            <button onClick={() => changeMonth('next')} className="month-btn" disabled={loading}>
              –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ‚Ä∫
            </button>
          </div>
          
          <Calendar 
            currentMonth={currentMonth}
            trainings={trainings}
            onDeleteTraining={deleteTraining}
            loading={loading}
          />
        </div>
      </div>
    </div>
  );
}
